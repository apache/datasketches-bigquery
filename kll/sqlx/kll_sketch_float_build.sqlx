/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(value FLOAT64, k INT NOT AGGREGATE)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["gs://$GCS_BUCKET/kll_sketch.mjs"],
  description = '''Creates a sketch that represents the distribution of the given column.
Param value: the column of values.
Param k: the sketch accuracy/size parameter as an integer in the range [8, 65535].
Returns: a KLL Sketch, as bytes.
For more details: https://datasketches.apache.org/docs/KLL/KLLSketch.html'''
) AS R"""
import ModuleFactory from "gs://$GCS_BUCKET/kll_sketch.mjs";
var Module = await ModuleFactory();
const default_k = Number(Module.DEFAULT_K);

// UDAF interface
export function initialState(k) {
  try {
    var state = {
      k: k == null ? default_k : Number(k),
    };
    state.sketch = new Module.kll_sketch_float(state.k);
    return state;
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function aggregate(state, value) {
  try {
    if (state.sketch == null) { // for transition deserialize-aggregate
      state.sketch = new Module.kll_sketch_float(state.k);
    }
    state.sketch.update(value);
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function serialize(state) {
  if (state.sketch == null) return state; // for transition deserialize-serialize
  try {
    // for prior transition deserialize-aggregate
    // merge aggregated and serialized state
    if (state.sketch != null && state.serialized != null) {
      sketch.mergeBytes(state.serialized);
    }
    return {
      k: state.k,
      serialized: state.sketch.serializeAsUint8Array()
    };
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  } finally {
    state.sketch.delete();
  }
}

export function deserialize(serialized) {
  return serialized;
}

export function merge(state, other_state) {
  try {
    if (state.sketch == null) {
      state.sketch = new Module.kll_sketch_float(state.k);
    }
    if (state.serialized != null) {
      state.sketch.mergeBytes(state.serialized);
      state.serialized = null;
    }
    if (other_state.serialized != null) {
      state.sketch.mergeBytes(other_state.serialized);
      other_state.serialized = null;
    }
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function finalize(state) {
  return serialize(state).serialized;
}
""";
