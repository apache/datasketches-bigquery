/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(sketch BYTES, params STRUCT<lg_k BYTEINT, seed INT64, mode STRING> NOT AGGREGATE)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["gs://$GCS_BUCKET/tuple_sketch_int64.mjs"],
  description = '''Builds a Tuple Sketch that represents the UNION of the given column of Tuple Sketches.
Note that cardinality estimation accuracy, plots, and error tables are the same as the Theta Sketch.
This function only applies to Tuple Sketches with an INT64 summary column.

Param sketch: the given column of Tuple Sketches with an INT64 summary column. This may not be NULL.
Param lg_k: the sketch accuracy/size parameter as an integer in the range [4, 26]. A NULL specifies the default lg_k of 12.
Param seed: the seed to be used by the underlying hash function. A NULL specifies the default seed of 9001.
Param mode:  aggregation mode for the summary field: one of { SUM, MIN, MAX, ONE (constant 1) }. A NULL specifies the default = SUM.
Returns: a Compact Tuple Sketch as BYTES.

For more information:
 - https://datasketches.apache.org/docs/Tuple/TupleSketches.html
'''
) AS R"""
import ModuleFactory from "gs://$GCS_BUCKET/tuple_sketch_int64.mjs";
var Module = await ModuleFactory();

function ensureUnion(state) {
  try {
    if (state.union == null) {
      state.union = new Module.tuple_union_int64(state.lg_k, state.seed, state.mode);
    }
    if (state.serialized != null) {
      state.union.updateWithBytes(state.serialized, state.seed);
      delete state.serialized;
    }
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function initialState(params) {
  return {
    lg_k: params.lg_k == null ? Number(Module.DEFAULT_LG_K) : Number(params.lg_k),
    seed: params.seed == null ? BigInt(Module.DEFAULT_SEED) : BigInt(params.seed),
    mode: params.mode == null ? "" : params.mode
  };
}

export function aggregate(state, sketch) {
  if (sketch == null) return;
  ensureUnion(state);
  try {
    state.union.updateWithBytes(sketch, state.seed);
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function serialize(state) {
  if (state.union == null) return state; // for transition deserialize-serialize
  try {
    if (state.serialized != null) {
      state.union.updateWithBytes(state.serialized, state.seed);
    }
    state.serialized = state.union.getResultAsUint8Array();
    state.union.delete();
    delete state.union;
    return state;
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  } finally {
    if (state.union != null) state.union.delete();
  }
}

export function deserialize(state) {
  return state;
}

export function merge(state, other_state) {
  ensureUnion(state);
  if (other_state.serialized != null) {
    try {
      state.union.updateWithBytes(other_state.serialized, other_state.seed);
      delete other_state.serialized;
    } catch (e) {
      if (e.message != null) throw e;
      throw new Error(Module.getExceptionMessage(e));
    }
  }
}

export function finalize(state) {
  return serialize(state).serialized;
}
""";
