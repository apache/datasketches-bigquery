/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(key INT64, value INT64, params STRUCT<lg_k BYTEINT, seed INT64, p FLOAT64, mode STRING> NOT AGGREGATE)
RETURNS BYTES 
LANGUAGE js
OPTIONS (
  library=["gs://$JS_BUCKET/tuple_sketch_int64.mjs"],
  description = '''Builds a Tuple Sketch from an INT64 Key column and an INT64 value column.
Multiple values for the same key are aggregated using one of the selectable operations: { SUM, MIN, MAX, ONE (constant 1) }.
Note that cardinality estimation accuracy, plots, error tables, and sampling probability p are the same as the Theta Sketch.
This function only applies to Tuple Sketches with an INT64 Key column and an INT64 summary column.

Param key: the INT64 key column of identifiers. This may not be NULL.
Param value: the INT64 value column associated with each key. This may not be NULL.
Param lg_k: the sketch accuracy/size parameter as an integer in the range [4, 26]. A NULL specifies the default lg_k of 12.
Param seed: the seed to be used by the underlying hash function. A NULL specifies the default seed of 9001.
Param p: up-front sampling probability. A NULL specifies the default of 1.0.
Param mode:  aggregation mode for the summary field: one of { SUM, MIN, MAX, ONE (constant 1) }. A NULL specifies the default = SUM.
Returns: a Compact Tuple Sketch as BYTES.

For more information:
 - https://datasketches.apache.org/docs/Tuple/TupleSketches.html
'''
) AS R"""
import ModuleFactory from "gs://$JS_BUCKET/tuple_sketch_int64.mjs";
var Module = await ModuleFactory();
const default_lg_k = Number(Module.DEFAULT_LG_K);
const default_seed = BigInt(Module.DEFAULT_SEED);
const default_p = 1.0;

// UDAF interface
export function initialState(params) {
  return {
    lg_k: params.lg_k == null ? default_lg_k : Number(params.lg_k),
    seed: params.seed == null ? default_seed : BigInt(params.seed),
    p: params.p == null ? default_p : params.p,
    mode: params.mode == null ? "" : params.mode
  };
}

export function aggregate(state, key, value) {
  if (key == null) return;
  try {
    if (state.sketch == null) {
      state.sketch = new Module.update_tuple_sketch_int64(state.lg_k, state.seed, state.p, state.mode);
    }
    state.sketch.updateInt64(key, value);
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function serialize(state) {
  if (state.sketch == null && state.union == null) return state; // for transition deserialize-serialize
  try {
    // for prior transition deserialize-aggregate
    // merge aggregated and serialized state
    if (state.sketch != null) {
      if (state.serialized != null) {
        var u = null;
        try {
          u = new Module.tuple_union_int64(state.lg_k, state.seed, state.mode);
          u.updateWithUpdateSketch(state.sketch);
          u.updateWithBytes(state.serialized, state.seed);
          state.serialized = u.getResultAsUint8Array();
        } finally {
          if (u != null) u.delete();
        }
      } else {
        state.serialized = state.sketch.serializeAsUint8Array();
      }
      state.sketch.delete();
      delete state.sketch;
    } else if (state.union != null) {
      state.serialized = state.union.getResultAsUint8Array();
      state.union.delete();
      delete state.union;
    }
    return state;
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  } finally {
    if (state.sketch != null) state.sketch.delete();
    if (state.union != null) state.unon.delete();
  }
}

export function deserialize(state) {
  return state;
}

export function merge(state, other_state) {
  try {
    if (state.union == null) {
      state.union = new Module.tuple_union_int64(state.lg_k, state.seed, state.mode);
    }
    if (state.serialized != null) {
      state.union.updateWithBytes(state.serialized, state.seed);
      delete state.serialized;
    }
    if (other_state.serialized != null) {
      state.union.updateWithBytes(other_state.serialized, other_state.seed);
      delete other_state.serialized;
    }
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function finalize(state) {
  return serialize(state).serialized
}
""";
