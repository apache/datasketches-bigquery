/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(str STRING, params STRUCT<lg_k BYTEINT, tgt_type STRING> NOT AGGREGATE)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["gs://$GCS_BUCKET/hll_sketch.mjs"],
  description = '''Creates a sketch that represents the cardinality of the given STRING column.
Param str: the STRING column of identifiers.
Param lg_k: the sketch accuracy/size parameter as an integer in the range [4, 26].
Param tgt_type: The HLL type to use, if or when the sketch reaches that state.
Returns: an HLL Sketch, as bytes, from which the cardinality can be obtained.
For more details: https://datasketches.apache.org/docs/HLL/HLL.html'''
) AS R"""
import ModuleFactory from "gs://$GCS_BUCKET/hll_sketch.mjs";
var Module = await ModuleFactory();
const default_lg_k = Number(12);
const default_tgt_type = Module.TargetHllType.HLL_4;

function destroyState(state) {
  if (state.sketch) {
    state.sketch.delete();
    state.sketch = null;
  }
  if (state.union) {
    state.union.delete();
    state.union = null;
  }
  state.serialized = null;
}

// UDAF interface
export function initialState(params) {
  try {
    var state = {
      lg_k: params.lg_k == null ? default_lg_k : Number(params.lg_k),
    };
    if (params.tgt_type == null) {
      state.tgt_type = default_tgt_type;
    } else if (params.tgt_type == "HLL_4") {
      state.tgt_type = Module.TargetHllType.HLL_4;
    } else if (params.tgt_type == "HLL_6") {
      state.tgt_type = Module.TargetHllType.HLL_6;
    } else if (params.tgt_type == "HLL_8") {
      state.tgt_type = Module.TargetHllType.HLL_8;
    } else {
      throw new Error("unrecognized HLL type " + params.tgt_type);
    }
    state.sketch = new Module.hll_sketch(state.lg_k, state.tgt_type);
    return state;
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function aggregate(state, str) {
  try {
    if (state.sketch == null) { // for transition deserialize-aggregate
      state.sketch = new Module.hll_sketch(state.lg_k, state.tgt_type);
    }
    state.sketch.updateString(str);
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function serialize(state) {
  if (state.sketch == null) return state; // for transition deserialize-serialize
  try {
    try {
      // for prior transition deserialize-aggregate
      // merge aggregated and serialized state
      if (state.sketch != null && state.serialized != null) {
        var u = null;
        try {
          u = new Module.hll_union(state.lg_k);
          u.updateWithSketch(state.sketch);
          u.updateWithBytes(state.serialized);
          state.serialized = u.getResultAsUint8Array(state.tgt_type);
        } finally {
          if (u != null) u.delete();
        }
      } else if (state.sketch != null) {
        state.serialized = state.sketch.serializeAsUint8Array();
      } else if (state.union != null) {
        state.serialized = state.union.getResultAsUint8Array(state.tgt_type);
      }
      return {
        lg_k: state.lg_k,
        tgt_type: state.tgt_type,
        serialized: state.serialized
      };
    } catch (e) {
      throw new Error(Module.getExceptionMessage(e));
    }
  } finally {
    destroyState(state);
  }
}

export function deserialize(state) {
  return state;
}

export function merge(state, other_state) {
  try {
    if (state.union == null) {
      state.union = new Module.hll_union(state.lg_k);
    }
    if (state.serialized) {
      state.union.updateWithBytes(state.serialized);
      state.serialized = null;
    }
    if (other_state.serialized) {
      state.union.updateWithBytes(other_state.serialized);
      other_state.serialized = null;
    }
  } catch (e) {
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function finalize(state) {
  return serialize(state).serialized
}
""";
