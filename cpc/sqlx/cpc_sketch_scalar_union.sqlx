/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE FUNCTION ${self()}(sketchA BYTES, sketchB BYTES, lg_k BYTEINT, seed INT64)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["gs://$GCS_BUCKET/cpc_sketch.js"],
  description = '''Computes a sketch that represents the scalar union of the two given sketches.
Param sketchA: the first sketch as bytes.
Param sketchB: the second sketch as bytes.
Param lg_k: the sketch accuracy/size parameter as an integer in the range [4, 26].
Param seed: This is used to confirm that the given sketches were configured with the correct seed.
Returns a CPC Sketch, as bytes, from which the union cardinality can be obtained.
For more details: https://datasketches.apache.org/docs/CPC/CPC.html'''
) AS R"""
const default_lg_k = 12;
const default_seed = BigInt(9001);
try {
  var union = new Module.cpc_union(lg_k ? lg_k : default_lg_k, seed ? BigInt(seed) : default_seed);
  try {
    union.updateWithB64(sketchA, seed ? BigInt(seed) : default_seed)
    union.updateWithB64(sketchB, seed ? BigInt(seed) : default_seed)
    return union.getResultB64();
  } finally {
    union.delete();
  }
} catch (e) {
  throw new Error(Module.getExceptionMessage(e));
}
""";
