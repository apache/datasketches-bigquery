/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

config { hasOutput: true }

CREATE OR REPLACE AGGREGATE FUNCTION ${self()}(sketch BYTES, params STRUCT<lg_k BYTEINT, seed INT64> NOT AGGREGATE)
RETURNS BYTES
LANGUAGE js
OPTIONS (
  library=["${JS_BUCKET}/apache_theta_sketch.mjs"],
  description = '''Creates a sketch that represents the union of the given column of sketches.

Param sketch: the column of sketches. Each as BYTES.
Param lg_k: the sketch accuracy/size parameter as a BYTEINT in the range [4, 26].
Param seed: This is used to confirm that the given sketches were configured with the correct seed.
Returns: a Compact, Compressed Theta Sketch, as BYTES.

For more information:
 - https://datasketches.apache.org/docs/Theta/ThetaSketches.html
'''
) AS R"""
import ModuleFactory from "${JS_BUCKET}/apache_theta_sketch.mjs";
var Module = await ModuleFactory();
const default_lg_k = Number(Module.DEFAULT_LG_K);
const default_seed = BigInt(Module.DEFAULT_SEED);

var buffer = {ptr: 0, size: 0};

function reserveBuffer(size) {
  if (buffer.size < size) {
    if (buffer.ptr != 0) {
      Module._free(buffer.ptr);
    }
    buffer.ptr = Module._malloc(size);
    buffer.size = size;
  }
}

// ensures we have a theta_union
// if there is a compact_theta_sketch, add it to the union and destroy it
function ensureUnion(state) {
  try {
    if (state.union == null) {
      state.union = new Module.theta_union(state.lg_k, state.seed);
    }
    if (state.serialized != null) {
      reserveBuffer(state.serialized.length);
      Module.HEAPU8.subarray(buffer.ptr, buffer.ptr + state.serialized.length).set(state.serialized);
      state.union.updateWithBuffer(buffer.ptr, state.serialized.length, state.seed);
      delete state.serialized;
    }
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function initialState(params) {
  var state = {
    lg_k: params.lg_k == null ? default_lg_k : Number(params.lg_k),
    seed: params.seed == null ? default_seed : BigInt(params.seed)
  };
  reserveBuffer(Module.compact_theta_sketch.getMaxSerializedSizeBytes(state.lg_k));
  return state;
}

export function aggregate(state, sketch) {
  if (sketch != null) {
    ensureUnion(state);
    try {
      reserveBuffer(sketch.length);
      Module.HEAPU8.subarray(buffer.ptr, buffer.ptr + sketch.length).set(sketch);
      state.union.updateWithBuffer(buffer.ptr, sketch.length, state.seed);
    } catch (e) {
      if (e.message != null) throw e;
      throw new Error(Module.getExceptionMessage(e));
    }
  }
}

export function serialize(state) {
  if (state.union == null) return state; // for transition deserialize-serialize
  ensureUnion(state);
  try {
    reserveBuffer(Module.compact_theta_sketch.getMaxSerializedSizeBytes(state.lg_k));
    var size = state.union.getResultStreamCompressed(buffer.ptr, buffer.size);
    return {
      lg_k: state.lg_k,
      seed: state.seed,
      serialized: Module.HEAPU8.slice(buffer.ptr, buffer.ptr + size)
    };
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  } finally {
    if (state.union != null) {
      state.union.delete();
      delete state.union;
    }
  }
}

export function deserialize(state) {
  return state;
}

export function merge(state, other_state) {
  reserveBuffer(Module.compact_theta_sketch.getMaxSerializedSizeBytes(state.lg_k));
  ensureUnion(state);
  try {
    reserveBuffer(other_state.serialized.length);
    Module.HEAPU8.subarray(buffer.ptr, buffer.ptr + other_state.serialized.length).set(other_state.serialized);
    state.union.updateWithBuffer(buffer.ptr, other_state.serialized.length, other_state.seed);
    delete other_state.serialized;
  } catch (e) {
    if (e.message != null) throw e;
    throw new Error(Module.getExceptionMessage(e));
  }
}

export function finalize(state) {
  return serialize(state).serialized;
}
""";
